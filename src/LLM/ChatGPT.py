import openai
import asyncio
from src.constants import DEFAULT_OPENAI
openai.api_key = DEFAULT_OPENAI.API_KEY

from src.LLM.basic_LLM import BasicLLM
import asyncio
import time
from openai import AsyncOpenAI as OpenAI   # OpenAI API

class ChatGPT(BasicLLM):
    """_summary_

    Args:
        BasicLLM (_type_): _description_
    """
    def __init__(self, model: str = "gpt-3.5-turbo", sleep_interval: int = 0) -> None:
        """_summary_

        Args:
            model (str, optional): the selected ChatGPT model. Defaults to "gpt-3.5-turbo".
            sleep_interval (int, optional): a time interval to sleep to avoid excessing ChatGPT's limitation of calling frequency. Defaults to 10.
        """
        super().__init__()
        self.client = OpenAI(api_key=DEFAULT_OPENAI.API_KEY)
        self.model = model
        self.sleep_interval = sleep_interval



    async def get_response(self, prompt: str, n: int = 1, temperature = 0.7) -> str:
        """Get response from ChatGPT

        Args:
            prompt (str): the prompt to be input to ChatGPT

        Returns:
            str: the response generated by ChatGPT
        """
        messages = [{"role": "system", "content": "You are an intelligent assistant."}]
        messages.append({"role": "user", "content": prompt})
        chat = None
        while chat is None:
            try:                
                chat = await asyncio.wait_for(self.client.chat.completions.create(
                    model=self.model, messages=messages, n=n, temperature=temperature),
                                              timeout=20)
            except asyncio.TimeoutError:
                return ["TimeoutError"]
            except Exception as e:
                print("ChatGPT error: " + e)
        await asyncio.sleep(self.sleep_interval)
        return [choice.message.content for choice in chat.choices]
    
    def get_response_sync(self, prompt: str, n: int = 1, temperature = 0.7) -> str:
        """Get response from ChatGPT

        Args:
            prompt (str): the prompt to be input to ChatGPT

        Returns:
            str: the response generated by ChatGPT
        """
        messages = [{"role": "system", "content": "You are an intelligent assistant."}]
        messages.append({"role": "user", "content": prompt})
        chat = None
        while chat is None:
            try:                
                chat = self.client.chat.completions.create(
                    model=self.model, messages=messages, n=n, temperature=temperature)
            except Exception as e:
                print("ChatGPT error: " + e)
        time.sleep(self.sleep_interval)
        return [choice.message.content for choice in chat.choices]

    def reset(self):
        pass

if __name__ == "__main__":
    async def main():
        chatgpt = ChatGPT(model="gpt-3.5-turbo")
        prompt = 'hello, who are you'
        response = await chatgpt.get_response(prompt)
        print(response)

    asyncio.run(main())
    
    
